/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SpamCheck as PrismaSpamCheck,
  Post as PrismaPost,
} from "@prisma/client";

export class SpamCheckServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SpamCheckCountArgs, "select">
  ): Promise<number> {
    return this.prisma.spamCheck.count(args);
  }

  async spamChecks(
    args: Prisma.SpamCheckFindManyArgs
  ): Promise<PrismaSpamCheck[]> {
    return this.prisma.spamCheck.findMany(args);
  }
  async spamCheck(
    args: Prisma.SpamCheckFindUniqueArgs
  ): Promise<PrismaSpamCheck | null> {
    return this.prisma.spamCheck.findUnique(args);
  }
  async createSpamCheck(
    args: Prisma.SpamCheckCreateArgs
  ): Promise<PrismaSpamCheck> {
    return this.prisma.spamCheck.create(args);
  }
  async updateSpamCheck(
    args: Prisma.SpamCheckUpdateArgs
  ): Promise<PrismaSpamCheck> {
    return this.prisma.spamCheck.update(args);
  }
  async deleteSpamCheck(
    args: Prisma.SpamCheckDeleteArgs
  ): Promise<PrismaSpamCheck> {
    return this.prisma.spamCheck.delete(args);
  }

  async getPost(parentId: string): Promise<PrismaPost | null> {
    return this.prisma.spamCheck
      .findUnique({
        where: { id: parentId },
      })
      .post();
  }
}
