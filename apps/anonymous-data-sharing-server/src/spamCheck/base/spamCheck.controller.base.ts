/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SpamCheckService } from "../spamCheck.service";
import { SpamCheckCreateInput } from "./SpamCheckCreateInput";
import { SpamCheck } from "./SpamCheck";
import { Post } from "../../post/base/Post";
import { SpamCheckFindManyArgs } from "./SpamCheckFindManyArgs";
import { SpamCheckWhereUniqueInput } from "./SpamCheckWhereUniqueInput";
import { SpamCheckUpdateInput } from "./SpamCheckUpdateInput";

export class SpamCheckControllerBase {
  constructor(protected readonly service: SpamCheckService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SpamCheck })
  async createSpamCheck(
    @common.Body() data: SpamCheckCreateInput
  ): Promise<SpamCheck> {
    return await this.service.createSpamCheck({
      data: {
        ...data,

        post: data.post
          ? {
              connect: data.post,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        post: {
          select: {
            id: true,
          },
        },

        reason: true,
        spamRating: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SpamCheck] })
  @ApiNestedQuery(SpamCheckFindManyArgs)
  async spamChecks(@common.Req() request: Request): Promise<SpamCheck[]> {
    const args = plainToClass(SpamCheckFindManyArgs, request.query);
    return this.service.spamChecks({
      ...args,
      select: {
        createdAt: true,
        id: true,

        post: {
          select: {
            id: true,
          },
        },

        reason: true,
        spamRating: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SpamCheck })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async spamCheck(
    @common.Param() params: SpamCheckWhereUniqueInput
  ): Promise<SpamCheck | null> {
    const result = await this.service.spamCheck({
      where: params,
      select: {
        createdAt: true,
        id: true,

        post: {
          select: {
            id: true,
          },
        },

        reason: true,
        spamRating: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SpamCheck })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSpamCheck(
    @common.Param() params: SpamCheckWhereUniqueInput,
    @common.Body() data: SpamCheckUpdateInput
  ): Promise<SpamCheck | null> {
    try {
      return await this.service.updateSpamCheck({
        where: params,
        data: {
          ...data,

          post: data.post
            ? {
                connect: data.post,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          post: {
            select: {
              id: true,
            },
          },

          reason: true,
          spamRating: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SpamCheck })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSpamCheck(
    @common.Param() params: SpamCheckWhereUniqueInput
  ): Promise<SpamCheck | null> {
    try {
      return await this.service.deleteSpamCheck({
        where: params,
        select: {
          createdAt: true,
          id: true,

          post: {
            select: {
              id: true,
            },
          },

          reason: true,
          spamRating: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
