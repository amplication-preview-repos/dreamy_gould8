/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SpamCheck } from "./SpamCheck";
import { SpamCheckCountArgs } from "./SpamCheckCountArgs";
import { SpamCheckFindManyArgs } from "./SpamCheckFindManyArgs";
import { SpamCheckFindUniqueArgs } from "./SpamCheckFindUniqueArgs";
import { CreateSpamCheckArgs } from "./CreateSpamCheckArgs";
import { UpdateSpamCheckArgs } from "./UpdateSpamCheckArgs";
import { DeleteSpamCheckArgs } from "./DeleteSpamCheckArgs";
import { Post } from "../../post/base/Post";
import { SpamCheckService } from "../spamCheck.service";
@graphql.Resolver(() => SpamCheck)
export class SpamCheckResolverBase {
  constructor(protected readonly service: SpamCheckService) {}

  async _spamChecksMeta(
    @graphql.Args() args: SpamCheckCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SpamCheck])
  async spamChecks(
    @graphql.Args() args: SpamCheckFindManyArgs
  ): Promise<SpamCheck[]> {
    return this.service.spamChecks(args);
  }

  @graphql.Query(() => SpamCheck, { nullable: true })
  async spamCheck(
    @graphql.Args() args: SpamCheckFindUniqueArgs
  ): Promise<SpamCheck | null> {
    const result = await this.service.spamCheck(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SpamCheck)
  async createSpamCheck(
    @graphql.Args() args: CreateSpamCheckArgs
  ): Promise<SpamCheck> {
    return await this.service.createSpamCheck({
      ...args,
      data: {
        ...args.data,

        post: args.data.post
          ? {
              connect: args.data.post,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => SpamCheck)
  async updateSpamCheck(
    @graphql.Args() args: UpdateSpamCheckArgs
  ): Promise<SpamCheck | null> {
    try {
      return await this.service.updateSpamCheck({
        ...args,
        data: {
          ...args.data,

          post: args.data.post
            ? {
                connect: args.data.post,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SpamCheck)
  async deleteSpamCheck(
    @graphql.Args() args: DeleteSpamCheckArgs
  ): Promise<SpamCheck | null> {
    try {
      return await this.service.deleteSpamCheck(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Post, {
    nullable: true,
    name: "post",
  })
  async getPost(@graphql.Parent() parent: SpamCheck): Promise<Post | null> {
    const result = await this.service.getPost(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
